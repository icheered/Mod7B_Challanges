/**
 * RoutingChallengeClient.h
 *
 *   Version: 2019-03-12
 *    Author: Jaco ter Braak & Frans van Dijk, University of Twente.
 * Copyright: University of Twente, 2015-2019
 *
 ************************************************************
 *                                                          *
 **                 DO NOT EDIT THIS FILE                  **
 ***         YOU DO NOT HAVE TO LOOK IN THIS FILE         ***
 **** IF YOU HAVE QUESTIONS PLEASE DO ASK A TA FOR HELP  ****
 *****                                                  *****
 ************************************************************
 */

#include <sys/types.h>

#ifdef _MSC_VER
#define NOMINMAX
#include <process.h>
using ssize_t = ptrdiff_t;
#include <Winsock2.h>
#include <Ws2tcpip.h>
#pragma comment(lib, "Ws2_32.lib")
#else
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cstdint>
#include <string>
#include <sstream>
#include <iostream>
#include <fcntl.h>
#include <thread>
#include <list>
#include <vector>
#include <mutex>
#include <fstream>
#include <math.h>
#include <map>
#include <cstring>
#include <algorithm>
#include "base64.h"
#include "SimulationState.h"
#include "PacketWithLinkCost.h"

#ifndef FRAMEWORK_ROUTINGCHALLENGECLIENT_H_
#define FRAMEWORK_ROUTINGCHALLENGECLIENT_H_

#define BUF_SIZE 65536


namespace framework {

    class IRoutingProtocol;
    class RoutingChallengeClient {
    public:
        RoutingChallengeClient(std::string serverAddress, int32_t serverPort,
            std::string clientGroupKey);
        ~RoutingChallengeClient();

        void setRoutingProtocolAndTock(IRoutingProtocol*);

        /**
         * Requests a simulation start from the server
         */
        void RequestStart();

        /**
         * Starts the simulation
         */
        void Start();

        /**
         * Handles communication between the server and the protocol implementation
         */
        void run();

        /**
         * Stops the client, and disconnects it from the server.
         */
        void Stop();

        /**
         * @return whether the simulation has been started
         */
        bool IsSimulationRunning();

        int32_t getAddress();

        SimulationState getSimulationState();

        int32_t getTestID();

        /**
         * Transmits a packet to another node
         *
         * @param packet
         *            Packet contains source address, destination address, and data.
         *            Destination address may be 0 to transmit to all neighbours
         *            (broadcast).
         */
        void Transmit(Packet packet);
    private:
        std::string protocolString = "ROUTINGCHALLENGE/4.1";
        ssize_t sock;
        std::string host;
        std::string port;
        std::string groupKey;
        std::string currentControlMessage = "";
        bool simulationStarted = false;
        bool simulationFinished = false;
        std::string socketBufferStr;
        std::thread eventLoopThread;
        IRoutingProtocol* protocol = NULL;
        SimulationState simulationState = Idle;

        int32_t address;
        std::vector<PacketWithLinkCost> packetBuffer;
        int32_t testID = 0;

        void clientConnect();
        void UploadForwardingTable();
        void TockWithTable();
        std::vector<unsigned char> SerializeTable(std::map<int32_t, int32_t>);
        std::string getControlMessageBlocking();
        std::string getControlMessage();
        void clearControlMessage();
        void sendControlMessage(std::string message);
        std::vector<std::string> &split(const std::string &s, char delim,
            std::vector<std::string> &elems);
        std::vector<std::string> split(const std::string &s, char delim);

    };

} /* namespace framework */

#endif /* FRAMEWORK_ROUTINGCHALLENGECLIENT_H_ */
