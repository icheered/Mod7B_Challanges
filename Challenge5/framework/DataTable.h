/**
 * DataTable.h
 *
 *   Version: 2017-03-15
 *    Author: Jaco ter Braak & Frans van Dijk, University of Twente.
 * Copyright: University of Twente, 2015-2019
 *
 ************************************************************
 *                                                          *
 **                 DO NOT EDIT THIS FILE                  **
 ***         YOU DO NOT HAVE TO LOOK IN THIS FILE         ***
 **** IF YOU HAVE QUESTIONS PLEASE DO ASK A TA FOR HELP  ****
 *****                                                  *****
 ************************************************************
 */

#include <stdlib.h>
#include <iostream>
#include <vector>
#include <sstream>

#ifndef DATATABLE_H_
#define DATATABLE_H_


namespace framework {
    class DataTable {
    public:
        /**
         * Construct a DataTable
         *
         * @param nColumns
         *            the number of columns in this table
         */
        DataTable(uint32_t nColumns);
        virtual ~DataTable();



        /**
         * Gets the number of columns in this table
         * @return number of columns
         */
        uint32_t getNColumns();

        /**
         * Gets the nuber of rows in this table
         * @return number of rows
         */
        uint32_t getNRows();


        /**
         * Set a table cell to a value. If the row does not exist, it is created and
         * initialized to all 0's.
         *
         * @param row Row index, starting at 0
         * @param column Column index, starting at 0
         * @param value
         */
        void set(uint32_t row, uint32_t column, int32_t value);

        /**
         * Gets a value from the table
         * @param row Row index, starting at 0
         * @param column Column index, starting at 0
         * @return value
         */
        int32_t get(uint32_t row, uint32_t column);

        /**
         * Inserts a row into the DataTable
         * @param row Row index, starting at 0
         * @param values Integer array of values
         */
        void setRow(uint32_t row, std::vector<int32_t> values);

        /**
         * Retrieves a row from the DataTable
         * @param row Row index, starting at 0
         * @return Integer array of valus
         */
        std::vector<int32_t> getRow(uint32_t row);

        /**
         * Adds a row to the end of the DataTable
         * @param values Integer array of values
         */
        void addRow(std::vector<int32_t> values);

    private:
        std::vector<std::vector<int32_t>> data = std::vector<std::vector<int32_t>>();
        uint32_t columns;
    };
}
#endif /* DATATABLE_H_ */
