/**
 * MACChallengeClient.h
 *
 *   Version: 2019-02-21
 *    Author: Jaco ter Braak & Frans van Dijk, University of Twente.
 * Copyright: University of Twente, 2015-2019
 *
 ************************************************************
 *                                                          *
 **                 DO NOT EDIT THIS FILE                  **
 ***         YOU DO NOT HAVE TO LOOK IN THIS FILE         ***
 **** IF YOU HAVE QUESTIONS PLEASE DO ASK A TA FOR HELP  ****
 *****                                                  *****
 ************************************************************
 */

#include <sys/types.h>

#ifdef _MSC_VER
#define NOMINMAX
#include <process.h>
using ssize_t = ptrdiff_t;
#include <Winsock2.h>
#include <Ws2tcpip.h>
#pragma comment(lib, "Ws2_32.lib")
#else
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cstdint>
#include <string.h>
#include <sstream>
#include <iostream>
#include <fcntl.h>
#include <thread>
#include <list>
#include <vector>
#include <mutex>
#include <fstream>
#include <math.h>
#include <algorithm>
#include "IMACProtocol.h"

#ifndef CLIENT_MACCHALLENGECLIENT_H_
#define CLIENT_MACCHALLENGECLIENT_H_

#define BUF_SIZE 65536

namespace framework {

    class MACChallengeClient {
    public:
        MACChallengeClient(std::string serverAddress, int serverPort,
            std::string clientGroupKey);
        virtual ~MACChallengeClient();
        void run();
        void requestStart();
        void start();
        bool isSimulationStarted();
        bool isSimulationFinished();
        void stop();
        void setListener(IMACProtocol*);

    private:
        std::string protocolString = "MACCHALLENGE/2.0";
        ssize_t sock;
        std::string host;
        std::string port;
        std::string groupKey;
        std::string currentControlMessage = "";
        bool simulationStarted = false;
        bool simulationFinished = false;
        std::string socketBufferStr;
        std::thread eventLoopThread;
        IMACProtocol* listener = NULL;

        void clientConnect();
        std::string getControlMessageBlocking();
        std::string getControlMessage();
        void clearControlMessage();
        void sendControlMessage(std::string message);
        std::vector<std::string> &split(const std::string &s, char delim,
            std::vector<std::string> &elems);
        std::vector<std::string> split(const std::string &s, char delim);
    };

} /* namespace framework */

#endif /* CLIENT_MACCHALLENGECLIENT_H_ */
