/**
 * DRDTChallengeClient.h
 *
 *   Version: 2018-02-14
 *    Author: Jaco ter Braak & Frans van Dijk, University of Twente.
 * Copyright: University of Twente, 2015-2019
 *
 ************************************************************
 *                                                          *
 **                 DO NOT EDIT THIS FILE                  **
 ***         YOU DO NOT HAVE TO LOOK IN THIS FILE         ***
 **** IF YOU HAVE QUESTIONS PLEASE DO ASK A TA FOR HELP  ****
 *****                                                  *****
 ************************************************************
 */

#include <sys/types.h>

#ifdef _MSC_VER
#define NOMINMAX
#include <process.h>
using ssize_t = ptrdiff_t;
#include <Winsock2.h>
#include <Ws2tcpip.h>
#pragma comment(lib, "Ws2_32.lib")
#else
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <cstdint>
#include <string.h>
#include <sstream>
#include <iostream>
#include <fcntl.h>
#include <thread>
#include <list>
#include <vector>
#include <mutex>
#include <fstream>
#include <math.h>
#include "base64.h"
#include "crc32.h"
#include <algorithm>

#ifndef DRDTCLIENT_DRDTCHALLENGECLIENT_H_
#define DRDTCLIENT_DRDTCHALLENGECLIENT_H_

#define BUF_SIZE 65536

namespace framework {

    class DRDTChallengeClient {

    public:
        DRDTChallengeClient(std::string serverAddress, int32_t serverPort,
            std::string clientGroupKey);
        virtual ~DRDTChallengeClient();
        void run();
        void requestStart(std::string);
        void start();
        bool isSimulationStarted();
        bool isSimulationFinished();
        bool isOutputBufferEmpty();
        bool receivePacket(std::vector<int32_t> *packet);
        void sendChecksum(std::string, std::string);
        void sendPacket(std::vector<int32_t> packet);
        void stop();
        std::string getFileID();
        std::thread * getEventLoop();

    private:
        std::string protocolString = "RDTCHALLENGE/4.0";
        ssize_t sock;
        std::string host;
        std::string port;
        std::string groupKey;
        std::string fileID;
        std::string currentControlMessage = "";
        bool simulationStarted = false;
        bool simulationFinished = false;
        bool isSender = false;
        std::string challenge;
        std::string socketBufferStr;
        std::thread eventLoopThread;
        std::list<std::vector<int32_t>> inputPacketBuffer;
        std::mutex inputPacketBufferLock;
        std::list<std::vector<int32_t>> outputPacketBuffer;
        std::mutex outputPacketBufferLock;

        void clientConnect();
        std::string getControlMessageBlocking();
        std::string getControlMessage();
        void clearControlMessage();
        void sendControlMessage(std::string message);
        std::vector<std::string> &split(const std::string &s, char delim,
            std::vector<std::string> &elems);
        std::vector<std::string> split(const std::string &s, char delim);
    };

} /* namespace framework */

#endif /* DRDTCLIENT_DRDTCHALLENGECLIENT_H_ */
