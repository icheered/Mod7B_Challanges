/**
 * Utils.h
 *
 *   Version: 2018-02-14
 *    Author: Jaco ter Braak & Frans van Dijk, University of Twente.
 * Copyright: University of Twente, 2015-2019
 *
 ************************************************************
 *                                                          *
 **                 DO NOT EDIT THIS FILE                  **
 ***         YOU DO NOT HAVE TO LOOK IN THIS FILE         ***
 **** IF YOU HAVE QUESTIONS PLEASE DO ASK A TA FOR HELP  ****
 *****                                                  *****
 ************************************************************
 */

#include "Utils.h"

namespace framework {
    Timer timerSystem;

    std::vector<int32_t> getFileContents(std::string id) {
        std::ifstream ifs("rdtcInput" + id + ".png", std::ifstream::binary);

        if (!ifs.good()) {
            std::cout << "File not found! Please verify that you have your files in the correct place." << std::endl;
            std::cout << "Missing file: rdtcInput" << id << ".png" << std::endl;
            exit(EXIT_FAILURE);
        }

        std::string content((std::istreambuf_iterator<char>(ifs)),
            (std::istreambuf_iterator<char>()));
        std::vector<int32_t> fileContents(content.length());

        for (size_t i = 0; i < content.length(); i++) {
            fileContents[i] = (int32_t)content[i];
        }

        ifs.close();
        return fileContents;
    }

    void setFileContents(std::vector<int32_t> fileContents, std::string id, std::string file_timestamp) {
        std::string filename = "rdtcOutput" + id + "." + file_timestamp + ".png";
        std::ofstream ofs(filename, std::ofstream::binary);

        std::string fileContentsStr = "";
        for (uint32_t i = 0; i < fileContents.size(); i++) {
            fileContentsStr += (char)fileContents[i];
        }
        ofs.write(fileContentsStr.c_str(), fileContentsStr.length());

        ofs.flush();
        ofs.close();
    }

    void SetTimeout(long millisecondsTimeout, ITimeoutEventHandler* instance, int32_t tag) {
        timerSystem.create(millisecondsTimeout, 0, instance, tag);
    }

} /* namespace framework */
